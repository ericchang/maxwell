use test
DROP TABLE if exists `test_table`
CREATE TABLE `test_table` ( id int auto_increment primary key, a text, b text )
insert into test_table set a='avalue'

->  {"database": {"string": "test"}, "table": {"string": "test_table"}, "type": {"string": "insert"},
->   "data": {"maxwell.test.columns": {"id": {"long": 1}, "a": {"string": "avalue"}}},
->   "old": null,
->   "schema": "{{{schema_test_table_cols_id_a}}}"
->  }

insert into test_table set a='avalue2', b='bvalue2'

->  {"database": {"string": "test"}, "table": {"string": "test_table"}, "type": {"string": "insert"},
->   "data": {"maxwell.test.columns": {"id": {"long": 2}, "a": {"string": "avalue2"}, "b": {"string": "bvalue2"}}},
->   "old": null,
->   "schema": "{{{schema_test_table_cols_id_a_b}}}"
->  }

update test_table set a='avalue3' where id = 2

->  {"database": {"string": "test"}, "table": {"string": "test_table"}, "type": {"string": "update"},
->   "data": {"maxwell.test.columns": {"id": {"long": 2}, "a": {"string": "avalue3"}}},
->   "old": null,
->   "schema": "{{{schema_test_table_cols_id_a}}}"
->  }

// # testing an open-replicator bug around >1 byte of NULLability columns
CREATE TABLE `test_table_2` ( id int auto_increment primary key, i1 int, i2 int, i3 int, i4 int, i5 int, i6 int, i7 int, i8 int, i9 int, i10 int );

insert into test_table_2 set i1=555, i2=777;

->  {"database": {"string": "test"}, "table": {"string": "test_table_2"}, "type": {"string": "insert"},
->   "data": {"maxwell.test.columns": {"id": {"long": 1}, "i1": {"long": 555}, "i2": {"long": 777}}},
->   "old": null,
->   "schema": "{{{schema_test_table_2_cols_id_i1_i2}}}"
->  }

update test_table_2 set i3=444 where i1=555;

->  {"database": {"string": "test"}, "table": {"string": "test_table_2"}, "type": {"string": "update"},
->   "data": {"maxwell.test.columns": {"id": {"long": 1}, "i3": {"long": 444}}},
->   "old": null,
->   "schema": "{{{schema_test_table_2_cols_id_i3}}}"
->  }
